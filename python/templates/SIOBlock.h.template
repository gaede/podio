//AUTOMATICALLY GENERATED - DO NOT EDIT
#ifndef ${name}SIOBlock_H
#define ${name}SIOBlock_H

#include "podio/SIOBlock.h"

#include <sio/api.h>
#include <sio/version.h>
#include <sio/io_device.h>
#include "${name}Collection.h"

#include  <typeindex>


${namespace_open}

class ${name}SIOBlock: public podio::SIOBlock{
  
public:
  
  
  ${name}SIOBlock() :
    SIOBlock( "${name}", sio::version::encode_version(0, 1) ){
    podio::SIOBlockFactory::instance().registerBlockForCollection( std::string("${classname}"), this) ;
  }
  
  ${name}SIOBlock(const std::string &nam ) :
    //SIOBlock( nam+std::string("__${name}"), sio::version::encode_version(0, 1) ){
    SIOBlock(nam , sio::version::encode_version(0, 1) ){
  }
  
  // Read the particle data from the device
  virtual void read( sio::read_device &device,
		     sio::version_type vers ) override ;
  
  // Write the particle data to the device
  virtual void write( sio::write_device &device ) override ;
  
  virtual  void createCollection() override {
    setCollection(  new ${name}Collection ) ;
  }

  SIOBlock* const create(const std::string name) override { return new ${name}SIOBlock(name) ; }

};


static ${name}SIOBlock _dummy${name}SIOBlock ;

${namespace_close}

#endif
